{"version":3,"file":"crypto.es.js","sources":["../lib/utils.ts","../lib/AES.ts","../lib/RSA.ts","../lib/index.ts"],"sourcesContent":["/*\nConvert  an ArrayBuffer into a string\nfrom https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\n*/\nexport function ab2str(uintArray: ArrayBuffer) {\n  var encodedString = String.fromCharCode.apply(null, Array.from(new Uint8Array(uintArray))),\n    decodedString = decodeURIComponent(encodedString);\n  return decodedString;\n}\n/*\nConvert a string into an ArrayBuffer\nfrom https://developers.google.com/web/updates/2012/06/How-to-convert-ArrayBuffer-to-and-from-String\n*/\nexport function str2ab(string: string) {\n  const str = encodeURIComponent(string),\n    charList = str.split(\"\"),\n    uintArray = [];\n  for (let i = 0; i < charList.length; i++) {\n    uintArray.push(charList[i].charCodeAt(0));\n  }\n  return new Uint8Array(uintArray);\n}\n/** ArrayBuffer转base64 */\nexport function ab2base64Str(buffer: ArrayBuffer) {\n  var binary = \"\";\n  var bytes = new Uint8Array(buffer);\n  var len = bytes.byteLength;\n  for (var i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(binary);\n}\n/** base64转ArrayBuffer */\nexport function base64Str2ab(base64String: string) {\n  const rawData = window.atob(base64String);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nexport const number2ab = (n: number) => {\n  // 大端模式转小端模式\n  const buf = new BigUint64Array([BigInt(n)]).buffer;\n  return buf;\n};\n\nexport const ab2number = (buf: ArrayBuffer) => {\n  const bufView = new BigUint64Array(buf);\n  return Number(bufView[0]);\n};\n\n// 合并多个ArrayBuffer\nexport const abConcatenate = (...arrays: ArrayBuffer[]) => {\n  let totalLen = 0;\n\n  for (let arr of arrays) totalLen += arr.byteLength;\n\n  let res = new Uint8Array(totalLen);\n\n  let offset = 0;\n\n  for (let arr of arrays) {\n    let uint8Arr = new Uint8Array(arr);\n\n    res.set(uint8Arr, offset);\n\n    offset += arr.byteLength;\n  }\n\n  return res.buffer;\n};\n","// TODO why is js\nimport { base64Str2ab, ab2base64Str } from \"./utils.js\";\n\nconst AES_CONFIG = {\n  name: \"AES-CTR\",\n  // iv: \"TjBU0kAoEV5wx2n+JaRIPg==\", // 改为随机\n  length: 128,\n};\n\n/*\n CryptoKey转base64(pem)格式\n */\nasync function cryptoKey2Base64Key(key: CryptoKey) {\n  try {\n    const exported = await window.crypto.subtle.exportKey(\"raw\", key);\n    const exportedAsBase64 = ab2base64Str(exported);\n    const pemExported = `${exportedAsBase64\n      .replace(/[^\\x00-\\xff]/g, \"$&\\x01\")\n      .replace(/.{64}\\x01?/g, \"$&\\n\")}`;\n    return pemExported;\n  } catch (error) {\n    console.log(error);\n  }\n  return null;\n}\n\n/*\n base64(pem)格式转CryptoKey\n */\nfunction base64Key2CryptoKey(pem: string) {\n  // convert from a binary string to an ArrayBuffer\n  const binaryDer = base64Str2ab(pem);\n\n  return window.crypto.subtle.importKey(\n    \"raw\",\n    binaryDer,\n    AES_CONFIG.name,\n    true,\n    [\"encrypt\", \"decrypt\"]\n  );\n}\n\n/*\n 自定义生成密钥对\n */\nexport const generateAESKey = async () => {\n  let key = await window.crypto.subtle.generateKey(\n    {\n      name: AES_CONFIG.name,\n      length: AES_CONFIG.length,\n    },\n    true,\n    [\"encrypt\", \"decrypt\"]\n  );\n  return cryptoKey2Base64Key(key);\n  // const rawKey = window.crypto.getRandomValues(new Uint8Array(16));\n  // return ab2base64Str(rawKey)\n};\n\nexport const AESEncrypt = async (key: any, data:  ArrayBuffer, iv: string) => {\n  const privateKey = await base64Key2CryptoKey(key);\n  const buffer = await window.crypto.subtle.encrypt(\n    {\n      name: AES_CONFIG.name,\n      counter: base64Str2ab(iv),\n      length: AES_CONFIG.length,\n    },\n    privateKey,\n    data\n  );\n  return ab2base64Str(buffer);\n};\n\nexport const AESDecrypt = async (key: string, text: string, iv: string) => {\n  const publicKey = await base64Key2CryptoKey(key);\n  const buffer = await window.crypto.subtle.decrypt(\n    {\n      name: AES_CONFIG.name,\n      counter: base64Str2ab(iv),\n      length: AES_CONFIG.length,\n    },\n    publicKey,\n    base64Str2ab(text)\n  );\n  return buffer;\n};\n","import { ab2base64Str, base64Str2ab, str2ab } from \"./utils.ts\";\n\nconst RSA_CONFIG = {\n  name: \"RSA-OAEP\",\n  hash: { name: \"SHA-256\" },\n};\n\nexport const clientRSAKeyPair: TRSAKeyPair = {\n  PRIVATE_KEY:\n    \"MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCHQrZ0kuI9midV2Ky08TIdxDbL6wsiQcsApG90SIZhWBCs42lfX8Gvyn7RRBKw9KoYRwshybLbnfLKEb/t9BS0zKtzxnLOL2GAXhSgNWXAV7YMQuiy9ScvpS2uiBL6OA7eP5+qmRtGh41FZs9GbTiYg2AvpZkgvnJsALP3TteRXoujVnq3MKTZpzfcFAiHIdWz9gIhZYfWRnZUamHK3Xyiysk/6QLs3n8nXjDRc2UyOVUmryl4uhNJ8p/Q3AnlXtWpyT3yImq/JS8/L7GRUuDD9EOdlngAlkcDp1gCfclJQcyoTsA6Yc1p0p3NmcbVWeUGZ9O3SsjEW2ckwNpaWDe5AgMBAAECggEAAfZ23VQwUkKFZZqCTxHc70+kl+ruO24G+xhnwaE3yfvUKh4WrlqeXeWrV3AMcWLrgPSu9auOm9874bDGPza2gjUiG8j6a4GGga1b0UNVGahsLNtfsxEZo3hbJFg3Jkhf9tunfntASRK4exRV16jIFHZ7k9VsVmxNDsIn2mPbfvGBv1yCtlsuCiBlZ58faQzitQmuhd+N50OV6M8+3NIwgOKp9VTWqHEWIU9INxaTtoplL3x7u9nkuN9Hn5Y2XQGKulxyVduj549v9/3Wh41GpisQvK4fQxs9erg+bUy+mCUr8k5TFh9WdpJ+gF2dX2LTpodoKH0Up6ZtV2usQ5s9gQKBgQDnrKaKM1rvLqVIJjdECg/ygdkOpwgsNsZCS3Mb0eAJcaZAs7sotMGiVj+c4Qe+QbwnLILqW83ggrBK/YhpL0Nn1nGorFTkEb7yGBv4AzITl2WjSInirjjD4ALvrM6o6s60w/Olp/MMrCenH0aX3ZG+jQu61miFyPfzw5m127F+kQKBgQCVdnuyXi1b8fTfSPetj5B44t3PQdBcv6wI27NBpcvU4005Iz/kGpITWxpmE72KGrkDeiCcs4AZRLOG7ko4NOvamsPhGjNYDa1ukXWR4RdTYWUyTUfSGOR89Wp9/ias6n3WFLy22exOoOA+UsTaLDhkj6/mTH7kTKlxRFh9QJoKqQKBgE3nmuEiP9PqZZ4La84vbAlqbKkmtfLYQHcOlBiozKOgWf2r8qXPksWaJy4D5eyugizSJPvV/zcd+1ZcR0DHqe0DCZlkye8foIwcW1tdB7vaz0zHGcbmOyRy8cnS3HOk8fmLYyUzguGiCnuCYuSyl03ydB1R+Df0ypxoDApBZEBhAoGAePUwWkPZVaXU1LdKqo2bEBoaBFdw9v6vjWOwCJrTAPELWAhs9n+CZGPAU4f6RsAlpui5Z9fk/Y4Z9EL4kdBSZ9IEYDJCByrahrb1fR+7LuGNck4Up7U5hN9gVaLPTfVf7VdO+nQWx/NuR0HYyfArm0alxi12K/DW2DHFo2gawjECgYAIfSyU+9YmqGiRmBb8VGh8lx8SpL0f0iOjTBZnSNPtRUSLMwCnATBvscUsVpYCaUvDVDwsVdvk5XxZ53Kp6UZHyWqTiskI7LT4dioIdbQfuW2gC2KJjMzCOcjAfS+9GyUhhA1Y1mlv5rscqMPNMwOkOJtBIDXZcI5+oIb0DL1FUw==\",\n  PUBLIC_KEY:\n    \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAh0K2dJLiPZonVdistPEyHcQ2y+sLIkHLAKRvdEiGYVgQrONpX1/Br8p+0UQSsPSqGEcLIcmy253yyhG/7fQUtMyrc8Zyzi9hgF4UoDVlwFe2DELosvUnL6UtrogS+jgO3j+fqpkbRoeNRWbPRm04mINgL6WZIL5ybACz907XkV6Lo1Z6tzCk2ac33BQIhyHVs/YCIWWH1kZ2VGphyt18osrJP+kC7N5/J14w0XNlMjlVJq8peLoTSfKf0NwJ5V7Vqck98iJqvyUvPy+xkVLgw/RDnZZ4AJZHA6dYAn3JSUHMqE7AOmHNadKdzZnG1VnlBmfTt0rIxFtnJMDaWlg3uQIDAQAB\",\n};\n\nexport const serverRSAKeyPair = {\n  PUBLIC_KEY:\n    \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAh0K2dJLiPZonVdistPEyHcQ2y+sLIkHLAKRvdEiGYVgQrONpX1/Br8p+0UQSsPSqGEcLIcmy253yyhG/7fQUtMyrc8Zyzi9hgF4UoDVlwFe2DELosvUnL6UtrogS+jgO3j+fqpkbRoeNRWbPRm04mINgL6WZIL5ybACz907XkV6Lo1Z6tzCk2ac33BQIhyHVs/YCIWWH1kZ2VGphyt18osrJP+kC7N5/J14w0XNlMjlVJq8peLoTSfKf0NwJ5V7Vqck98iJqvyUvPy+xkVLgw/RDnZZ4AJZHA6dYAn3JSUHMqE7AOmHNadKdzZnG1VnlBmfTt0rIxFtnJMDaWlg3uQIDAQAB\",\n};\n\n/*\n CryptoKey转base64(pem)格式\n */\nasync function cryptoKey2Base64Key(key: CryptoKey, isPrivate: boolean) {\n  try {\n    const exported = await window.crypto.subtle.exportKey(\n      isPrivate ? \"pkcs8\" : \"spki\",\n      key\n    );\n    const exportedAsBase64 = ab2base64Str(exported);\n    return exportedAsBase64;\n  } catch (error) {\n    console.log(error);\n  }\n  return null;\n}\n\n/*\n base64(pem)格式转CryptoKey\n */\nfunction base64Key2CryptoKey(pem: string, isPrivate: boolean) {\n  // convert from a binary string to an ArrayBuffer\n  const binaryDer = base64Str2ab(pem);\n\n  return window.crypto.subtle.importKey(\n    isPrivate ? \"pkcs8\" : \"spki\",\n    binaryDer,\n    {\n      name: RSA_CONFIG.name,\n      hash: RSA_CONFIG.hash,\n    },\n    true,\n    [isPrivate ? \"decrypt\" : \"encrypt\"]\n  );\n}\n\nasync function savePublicKey(publicKey: CryptoKey) {\n  clientRSAKeyPair.PUBLIC_KEY = await cryptoKey2Base64Key(publicKey, false);\n}\nasync function savePrivateKey(privateKey: CryptoKey) {\n  clientRSAKeyPair.PRIVATE_KEY = await cryptoKey2Base64Key(privateKey, true);\n}\n\n/*\n 自定义生成密钥对\n */\nexport const generateRSAKey = async () => {\n  const keyPair = await window.crypto.subtle.generateKey(\n    {\n      name: RSA_CONFIG.name,\n      // Consider using a 4096-bit key for systems that require long-term security\n      modulusLength: 2048,\n      publicExponent: new Uint8Array([1, 0, 1]),\n      hash: RSA_CONFIG.hash,\n    },\n    true,\n    [\"encrypt\", \"decrypt\"]\n  );\n  await savePublicKey(keyPair.publicKey);\n  await savePrivateKey(keyPair.privateKey);\n  return clientRSAKeyPair;\n};\n\nexport const base64Key2CryptoSignKey = (\n  key: string,\n  isPrivate: boolean,\n  keyUsages: KeyUsage[]\n) => {\n  const binaryDer = base64Str2ab(key);\n  // @ts-ignore\n  return window.crypto.subtle.importKey(\n    isPrivate ? \"pkcs8\" : \"spki\",\n    binaryDer,\n    {\n      name: \"RSASSA-PKCS1-v1_5\",\n      // Consider using a 4096-bit key for systems that require long-term security\n      modulusLength: 2048,\n      publicExponent: new Uint8Array([1, 0, 1]),\n      hash: \"SHA-256\",\n    },\n    true,\n    keyUsages\n  );\n};\n\n/*\n 生成签名\n */\nexport const generateRSASign = async (data: string) => {\n  const privateKey = await base64Key2CryptoSignKey(\n    clientRSAKeyPair.PRIVATE_KEY || \"\",\n    true,\n    [\"sign\"]\n  );\n  if (privateKey !== null) {\n    let buffer = await window.crypto.subtle.sign(\n      \"RSASSA-PKCS1-v1_5\",\n      privateKey,\n      str2ab(data)\n    );\n    return ab2base64Str(buffer);\n  }\n  return null;\n};\n/**\n * 验证签名\n */\nexport const verifySign = async (sign: string, data: string) => {\n  const publicKey = await base64Key2CryptoSignKey(\n    clientRSAKeyPair.PUBLIC_KEY || \"\",\n    false,\n    [\"verify\"]\n  );\n  return window.crypto.subtle.verify(\n    \"RSASSA-PKCS1-v1_5\",\n    publicKey,\n    base64Str2ab(sign),\n    str2ab(data)\n  );\n};\n\n/*\n 加密\n */\nexport const RSAEncrypt = async (publicKey: string, data: ArrayBuffer, ) => {\n  const bufferKey = await base64Key2CryptoKey(publicKey, false);\n  if (bufferKey !== null) {\n    const buffer = await window.crypto.subtle.encrypt(\n      {\n        name: RSA_CONFIG.name,\n      },\n      bufferKey,\n      data\n    );\n    return ab2base64Str(buffer);\n  }\n  return \"\";\n};\n/*\n 解密\n */\nexport const RSADecrypt = async (privateKey: string, textAb: ArrayBuffer) => {\n  const bufferKey = await base64Key2CryptoKey(privateKey, true);\n \n  if (bufferKey !== null) {\n    const buffer = await window.crypto.subtle.decrypt(\n      {\n        name: RSA_CONFIG.name,\n      },\n      bufferKey,\n      textAb\n    );\n    return buffer;\n  }\n  return new ArrayBuffer(0);\n};\n","// @ts-ignore\nimport { AESEncrypt, AESDecrypt, generateAESKey } from \"./AES.ts\";\n// @ts-ignore\nimport {\n  RSAEncrypt,\n  clientRSAKeyPair,\n  serverRSAKeyPair,\n  generateRSASign,\n  RSADecrypt,\n} from \"./RSA.js\";\nimport {\n  str2ab,\n  abConcatenate,\n  ab2base64Str,\n  base64Str2ab,\n  number2ab,\n  ab2str,\n} from \"./utils.js\";\n\nexport const encrypt = async (data: string) => {\n  // 生成签名\n  const sign = (await generateRSASign(data)) || \"\";\n  // console.log(\"sign\", sign);\n  // 时间戳\n  const timestemp = Date.now();\n  // console.log(\"timestemp\", timestemp);\n  // 组合 时间戳、签名、数据\n  const hybridBuffer = abConcatenate(\n    number2ab(timestemp),\n    base64Str2ab(sign),\n    str2ab(data)\n  );\n\n  // 生成会话密钥AESKey\n  const AESKey = (await generateAESKey()) || \"\";\n  // const AESKey = 'dFvRuiiKY+srZbgVbU/JFg=='\n  // console.log(\"AESKey\", AESKey);\n  // 生成Nonce\n  const nonce = ab2base64Str(window.crypto.getRandomValues(new Uint8Array(16)));\n  // console.log(\"nonce\", nonce);\n  // 加密数据\n  let encrypt = await AESEncrypt(AESKey, hybridBuffer, nonce);\n  // console.log(\"encrypt\", encrypt);\n  // 用公钥加密的AESKey\n  const encryptAESKey =\n    (await RSAEncrypt(serverRSAKeyPair.PUBLIC_KEY, base64Str2ab(AESKey))) || \"\";\n  // console.log('encryptAESKey', encryptAESKey)\n  // 组合 Nonce、加密会话密钥、加密数据\n  const result = abConcatenate(\n    base64Str2ab(nonce),\n    base64Str2ab(encryptAESKey),\n    base64Str2ab(encrypt)\n  );\n\n  return ab2base64Str(result);\n};\n\nexport const decrypt = async (text: string) => {\n  \n  // base64转字节码\n  const result = base64Str2ab(text);\n  // 截取nonce\n  const nonce = result.slice(0, 16);\n  // 截取用公钥加密的AESKey\n  const encryptAESKey = result.slice(16, 16 + 256);\n  // 截取加密后的组合数据\n  const encrypt = result.slice(16 + 256);\n\n  // 获取AESKey\n  const AESKey = await RSADecrypt(\n    clientRSAKeyPair.PRIVATE_KEY || \"\",\n    encryptAESKey\n  );\n\n  // 获取解密后的组合数据\n  const hybridBuffer = await AESDecrypt(\n    ab2base64Str(AESKey),\n    ab2base64Str(encrypt),\n    ab2base64Str(nonce)\n  );\n\n  // // 截取时间戳 五分钟校验\n  // const timestemp = hybridBuffer.slice(0, 8)\n  // // 截取签名\n  // const sign = hybridBuffer.slice(8, 8 +256)\n  // 截取消息体\n  const data = hybridBuffer.slice(8 + 256);\n  return ab2str(data);\n};\n"],"names":["base64Key2CryptoKey"],"mappings":"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"}